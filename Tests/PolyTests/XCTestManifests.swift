#if !canImport(ObjectiveC)
import XCTest

extension CollectionPolyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectionPolyTests = [
        ("test_EightDifferentTypes", test_EightDifferentTypes),
        ("test_EightDifferentTypes_encode", test_EightDifferentTypes_encode),
        ("test_FiveDifferentTypes", test_FiveDifferentTypes),
        ("test_FiveDifferentTypes_encode", test_FiveDifferentTypes_encode),
        ("test_FourDifferentTypes", test_FourDifferentTypes),
        ("test_FourDifferentTypes_encode", test_FourDifferentTypes_encode),
        ("test_NineDifferentTypes", test_NineDifferentTypes),
        ("test_NineDifferentTypes_encode", test_NineDifferentTypes_encode),
        ("test_Poly1", test_Poly1),
        ("test_Poly1_encode", test_Poly1_encode),
        ("test_SevenDifferentTypes", test_SevenDifferentTypes),
        ("test_SevenDifferentTypes_encode", test_SevenDifferentTypes_encode),
        ("test_SixDifferentTypes", test_SixDifferentTypes),
        ("test_SixDifferentTypes_encode", test_SixDifferentTypes_encode),
        ("test_TenDifferentTypes", test_TenDifferentTypes),
        ("test_TenDifferentTypes_encode", test_TenDifferentTypes_encode),
        ("test_ThreeDifferentTypes", test_ThreeDifferentTypes),
        ("test_ThreeDifferentTypes_encode", test_ThreeDifferentTypes_encode),
        ("test_TwoDifferentTypes", test_TwoDifferentTypes),
        ("test_TwoDifferentTypes_encode", test_TwoDifferentTypes_encode),
        ("test_TwoSameType", test_TwoSameType),
        ("test_TwoSameType_encode", test_TwoSameType_encode),
    ]
}

extension PolyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PolyTests = [
        ("test_DoubleThenInt", test_DoubleThenInt),
        ("test_init_Poly0", test_init_Poly0),
        ("test_init_Poly1", test_init_Poly1),
        ("test_init_Poly10", test_init_Poly10),
        ("test_init_Poly2", test_init_Poly2),
        ("test_init_Poly3", test_init_Poly3),
        ("test_init_Poly4", test_init_Poly4),
        ("test_init_Poly5", test_init_Poly5),
        ("test_init_Poly6", test_init_Poly6),
        ("test_init_Poly7", test_init_Poly7),
        ("test_init_Poly8", test_init_Poly8),
        ("test_init_Poly9", test_init_Poly9),
        ("test_IntThenDouble", test_IntThenDouble),
        ("test_mapWithProtocol", test_mapWithProtocol),
        ("test_Poly10_decode_throws_typeNotFound", test_Poly10_decode_throws_typeNotFound),
        ("test_Poly10_lookup", test_Poly10_lookup),
        ("test_Poly1_decode_throws_typeNotFound", test_Poly1_decode_throws_typeNotFound),
        ("test_Poly1_lookup", test_Poly1_lookup),
        ("test_Poly2_decode_throws_typeNotFound", test_Poly2_decode_throws_typeNotFound),
        ("test_Poly2_lookup", test_Poly2_lookup),
        ("test_Poly3_decode_throws_typeNotFound", test_Poly3_decode_throws_typeNotFound),
        ("test_Poly3_lookup", test_Poly3_lookup),
        ("test_Poly4_decode_throws_typeNotFound", test_Poly4_decode_throws_typeNotFound),
        ("test_Poly4_lookup", test_Poly4_lookup),
        ("test_Poly5_decode_throws_typeNotFound", test_Poly5_decode_throws_typeNotFound),
        ("test_Poly5_lookup", test_Poly5_lookup),
        ("test_Poly6_decode_throws_typeNotFound", test_Poly6_decode_throws_typeNotFound),
        ("test_Poly6_lookup", test_Poly6_lookup),
        ("test_Poly7_decode_throws_typeNotFound", test_Poly7_decode_throws_typeNotFound),
        ("test_Poly7_lookup", test_Poly7_lookup),
        ("test_Poly8_decode_throws_typeNotFound", test_Poly8_decode_throws_typeNotFound),
        ("test_Poly8_lookup", test_Poly8_lookup),
        ("test_Poly9_decode_throws_typeNotFound", test_Poly9_decode_throws_typeNotFound),
        ("test_Poly9_lookup", test_Poly9_lookup),
        ("test_PolyTypeNotFoundOutput", test_PolyTypeNotFoundOutput),
    ]
}

extension ResultValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultValueTests = [
        ("test_errorAccess", test_errorAccess),
        ("test_valueAccess", test_valueAccess),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CollectionPolyTests.__allTests__CollectionPolyTests),
        testCase(PolyTests.__allTests__PolyTests),
        testCase(ResultValueTests.__allTests__ResultValueTests),
    ]
}
#endif
